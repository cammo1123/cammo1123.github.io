import{b as f,o as x,i as c,c as m,F as p,d as $,e as b,t as g}from"./index.644377d0.js";const S=g('<div class="githubSearch"><header><h1>Repositories for</h1><form><input type="text" placeholder="username"></form></header><div class="githubGrid"></div></div>'),C=g('<div class="loading"></div>'),k=g('<a target="_blank" rel="noreferrer" class="githubCard"><h1></h1><p></p><span><i class="bx bx-git-repo-forked"></i><i class="bx bx-star"></i></span></a>'),R=()=>{const[t,a]=f("cammo1123"),[d,r]=f("No results"),[o,u]=f(),h=async s=>{const n=await(await fetch(`https://api.github.com/users/${s}/repos`)).json(),l=n.message;if(!l)u(n),r("Results");else if(l.includes("Not Found")){u([]),r("User not found");return}else if(l.includes("API rate limit exceeded")){u([]),r("API rate limit exceeded");return}};return x(async()=>{await h(t())}),(()=>{const s=S.cloneNode(!0),i=s.firstChild,n=i.firstChild,l=n.nextSibling,_=l.firstChild,v=i.nextSibling;return l.addEventListener("submit",async e=>{r("Loading..."),e.preventDefault(),await h(t())}),_.addEventListener("change",e=>a(e.currentTarget.value)),c(v,m(p,{get each(){return o()},get fallback(){return(()=>{const e=C.cloneNode(!0);return c(e,d),e})()},children:e=>m(y,{get name(){return e.full_name},get url(){return e.html_url},get forks(){return e.forks_count},get stars(){return e.stargazers_count},get description(){return e.description}})})),$(()=>_.value=t()),s})()},y=t=>(()=>{const a=k.cloneNode(!0),d=a.firstChild,r=d.nextSibling,o=r.nextSibling,u=o.firstChild,h=u.nextSibling;return c(d,()=>t.name),c(r,()=>t.description??""),c(o,()=>t.forks??0,h),c(o,()=>t.stars??0,null),$(s=>{const i=t.name??"",n=t.url;return i!==s._v$&&b(a,"aria-label",s._v$=i),n!==s._v$2&&b(a,"href",s._v$2=n),s},{_v$:void 0,_v$2:void 0}),a})();export{R as G,y as a};
