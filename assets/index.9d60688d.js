import{b as f,o as x,i as c,c as d,F as p,d as b,e as $,t as _,s as S,P as C,a as P}from"./index.f91b820d.js";const k=_('<div class="githubSearch"><header><h1>Repositories for</h1><form><input type="text" placeholder="username"></form></header><div class="githubGrid"></div></div>'),y=_('<div class="loading"></div>'),N=_('<a target="_blank" rel="noreferrer" class="githubCard"><h1></h1><p></p><span><i class="bx bx-git-repo-forked"></i><i class="bx bx-star"></i></span></a>'),R=()=>{const[t,a]=f("cammo1123"),[g,s]=f("No results"),[o,u]=f(),h=async r=>{const n=await(await fetch(`https://api.github.com/users/${r}/repos`)).json(),l=n.message;if(!l)u(n),s("Results");else if(l.includes("Not Found")){u([]),s("User not found");return}else if(l.includes("API rate limit exceeded")){u([]),s("API rate limit exceeded");return}};return x(async()=>{await h(t())}),(()=>{const r=k.cloneNode(!0),i=r.firstChild,n=i.firstChild,l=n.nextSibling,m=l.firstChild,v=i.nextSibling;return l.addEventListener("submit",async e=>{s("Loading..."),e.preventDefault(),await h(t())}),m.addEventListener("change",e=>a(e.currentTarget.value)),c(v,d(p,{get each(){return o()},get fallback(){return(()=>{const e=y.cloneNode(!0);return c(e,g),e})()},children:e=>d(j,{get name(){return e.full_name},get url(){return e.html_url},get forks(){return e.forks_count},get stars(){return e.stargazers_count},get description(){return e.description}})})),b(()=>m.value=t()),r})()},j=t=>(()=>{const a=N.cloneNode(!0),g=a.firstChild,s=g.nextSibling,o=s.nextSibling,u=o.firstChild,h=u.nextSibling;return c(g,()=>t.name),c(s,()=>t.description??""),c(o,()=>t.forks??0,h),c(o,()=>t.stars??0,null),b(r=>{const i=t.name??"",n=t.url;return i!==r._v$&&$(a,"aria-label",r._v$=i),n!==r._v$2&&$(a,"href",r._v$2=n),r},{_v$:void 0,_v$2:void 0}),a})();function A(){return S("projects"),d(P,{name:"projects",get children(){return d(C,{get children(){return d(R,{})}})}})}export{A as default};
